# SPDX-License-Identifier: Apache-2.0

name: E2E test

on:
  workflow_dispatch:

jobs:
  e2e:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python:
          - "3.11"

    steps:
      - name: Free disk space
        run: |
          df -h
          sudo docker rmi "$(docker image ls -aq)" >/dev/null 2>&1 || true
          sudo rm -rf \
            /usr/share/dotnet /usr/local/lib/android /opt/ghc \
            /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup \
            /usr/lib/jvm || true
          sudo apt install aptitude -y >/dev/null 2>&1
          sudo aptitude purge '~n ^mysql' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^dotnet' -f -y >/dev/null 2>&1
          sudo apt-get autoremove -y >/dev/null 2>&1
          sudo apt-get autoclean -y >/dev/null 2>&1
          df -h

      - name: Checkout
        uses: actions/checkout@v4
        with:
          # https://github.com/actions/checkout/issues/249
          fetch-depth: 0
          submodules: 'true'

      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      # tox creates (and reuses) a separate Python (virtual) environment for each context (fmt, lint, unit)
      # tox requires (and will install, if not exists) all the packages listed in requirements.txt
      # so we want to cache the entire Python environment, not just the pip cache as tox will not reuse that
      # but caching tox environments is fickle and can cause weird errors
      # tox does provide a legacy option to reuse the Python system wide site packages
      # since GH action runners are one-and-done we can install all requirements into the system packages
      # and cache and reuse all of the installed Python system packages
      # tox can then reuse the system site packages with setting `-x testenv:unit.system_site_packages=True`
      - name: Cache dependencies
        uses: actions/cache@v4
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          # v2: previous restore key did not depend on requirements.txt and contained 'mlx'
          key: ${{ env.pythonLocation }}-${{ hashFiles('requirements.txt') }}-v2-${{ hashFiles('requirements-dev.txt') }}
          restore-keys:
            ${{ env.pythonLocation }}-${{ hashFiles('requirements.txt') }}-v2-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -r requirements-dev.txt

      - name: Run e2e test
        run: |
          tox \
            -x testenv:functional.system_site_packages=True \
            -e py3-e2e
